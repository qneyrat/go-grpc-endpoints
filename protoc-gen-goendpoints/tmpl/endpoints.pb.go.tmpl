{{$package := .Package }}
package {{ $package }}

import "context"
{{ $services := .Services }}{{range  $service := $services}}
{{if $service.Name }}{{ $methods := .Methods }}{{range $method := $methods }}{{ if $method.ServerStreaming }}
type {{ $method|getProtoName }}EndpointFunc func(req *{{ $method|getProtoInputType }}, stream {{ $package|camelCase }}_{{ $method|getProtoName }}Server) error
{{ else }}
type {{ $method|getProtoName }}EndpointFunc func(ctx context.Context, req *{{ $method|getProtoInputType }}) (*{{ $method|getProtoOutputType }}, error)
{{ end }}
{{end}}

type {{ $service.Name }}Endpoints struct {
    {{range $method := $methods }}{{ $method|getProtoName }}Endpoint {{ $method|getProtoName }}EndpointFunc
    {{end}}
}

type {{ $service.Name }}EndpointsWrapper struct {
    {{range $method := $methods }}{{ $method|getProtoNameToLower }} {{ $method|getProtoName }}EndpointFunc
    {{end}}
}

func New{{ $service.Name }}EndpointsWrapper(e {{ $service.Name }}Endpoints) *{{ $service.Name }}EndpointsWrapper {
    return &{{ $service.Name }}EndpointsWrapper {
        {{range $method := $methods }}{{ $method|getProtoNameToLower }}: e.{{ $method|getProtoName }}Endpoint,
        {{end}}
    }
}

{{range $method := $methods }}
{{ if $method.ServerStreaming }}
func (w {{ $service.Name }}EndpointsWrapper) {{ $method|getProtoName }}(req *{{ $method|getProtoInputType }}, stream {{ $package|camelCase }}_{{ $method|getProtoName }}Server) error {
    return w.{{ $method|getProtoNameToLower }}(req, stream)
}
{{ else }}
func (w {{ $service.Name }}EndpointsWrapper) {{ $method|getProtoName }}(ctx context.Context, req *{{ $method|getProtoInputType }}) (*{{ $method|getProtoOutputType }}, error) {
    return w.{{ $method|getProtoNameToLower }}(ctx, req)
}
{{ end }}
{{end}}{{end}}{{end}}