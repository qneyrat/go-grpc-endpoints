// Code generated by go-bindata.
// sources:
// endpoints.pb.go.tmpl
// DO NOT EDIT!

package tmpl

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _endpointsPbGoTmpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xbc\x93\x51\x4b\xc3\x30\x10\xc7\xdf\xf3\x29\x8e\x31\xa4\x95\xd1\x0f\x30\xf0\x49\x14\x04\x9d\x03\x07\x3e\x97\xec\x36\x8b\x34\x89\xd7\xab\x9d\xc4\x7c\x77\x49\x93\x76\x4e\x66\x57\x64\xf8\xd4\x4b\xef\x72\xf7\xfb\xff\x8f\x98\x5c\xbe\xe6\x5b\x04\x6b\x21\x5b\xc6\xd8\x39\x21\x8a\xd2\x68\x62\x98\x48\xad\x18\x77\x3c\x11\xd6\xc2\xb4\x42\x7a\x2f\x24\x56\x30\xbf\x82\xec\xa9\x3b\x38\x67\x2d\xe5\x6a\x8b\xd0\x57\xf8\x82\xbe\xda\xe7\x8b\x4d\x7f\xce\x16\x79\x89\xed\x25\x98\x96\xc8\x2f\x7a\x1d\xfa\x3d\xc4\xd8\x39\xd1\xf5\x8b\xf9\xb6\x5b\xd9\xa7\xf9\xc3\xb4\xbc\xf1\xd7\xe7\x16\x79\x49\x9a\x75\xec\x7b\xa3\xd6\x46\x17\x8a\x6f\x6b\x25\x61\x53\x2b\x99\x48\xde\x41\xd4\x91\x5d\x87\xef\x0c\x08\xdf\xe0\xf2\x48\x97\x3b\x65\x6a\x5e\xf9\x11\xce\xa5\x90\x1c\x2b\x79\xac\x79\x5f\x33\x03\x24\xd2\x94\x0a\x6b\x51\xad\xbd\x75\x3d\xdf\x0f\xc1\x1d\x58\x05\x15\x53\x2d\x19\xac\x00\x00\x18\x16\x7b\x5a\xe7\x48\x2b\xe2\xac\xc0\x38\x86\xf2\x99\x72\x63\x90\xce\x00\xbb\xd2\xf7\xba\x41\x02\xe7\xfe\xc8\xea\xb7\x08\x0b\x6c\x46\xe0\x26\xc3\xa2\xd2\xb0\xf3\x53\x9a\x83\x58\x42\xae\x49\xc1\xc5\xf8\x1b\x67\xb0\x68\x0e\x98\x9d\x76\x69\xf6\x6d\x5c\xb0\xc9\xc7\xad\x59\xc3\xf3\x5b\x2b\x93\x66\xcc\xe6\xd3\x81\x6d\xfd\xcf\x9b\x3a\xdc\x43\xf3\x9b\x2f\x7b\xf3\x3c\x56\x8b\x91\x0a\xd7\x3d\xc8\xc3\xcf\x57\x00\x00\x00\xff\xff\x50\x23\x49\xe1\xf0\x04\x00\x00")

func endpointsPbGoTmplBytes() ([]byte, error) {
	return bindataRead(
		_endpointsPbGoTmpl,
		"endpoints.pb.go.tmpl",
	)
}

func endpointsPbGoTmpl() (*asset, error) {
	bytes, err := endpointsPbGoTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "endpoints.pb.go.tmpl", size: 1264, mode: os.FileMode(420), modTime: time.Unix(1539341554, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"endpoints.pb.go.tmpl": endpointsPbGoTmpl,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"endpoints.pb.go.tmpl": &bintree{endpointsPbGoTmpl, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

