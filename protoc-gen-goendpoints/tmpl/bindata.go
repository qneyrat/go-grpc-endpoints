// Code generated by go-bindata. (@generated) DO NOT EDIT.
// sources:
// bindata.go
// endpoints.pb.go.tmpl
package tmpl

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _bindataGo = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x01\x00\x00\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00")

func bindataGoBytes() ([]byte, error) {
	return bindataRead(
		_bindataGo,
		"bindata.go",
	)
}

func bindataGo() (*asset, error) {
	bytes, err := bindataGoBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "bindata.go", size: 0, mode: os.FileMode(420), modTime: time.Unix(1549897295, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _endpointsPbGoTmpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xbc\x94\x5f\x6b\xf2\x30\x14\xc6\xef\xf3\x29\x0e\x22\x2f\xed\x8b\xf4\x03\x08\xbb\x92\x0d\x06\x9b\x13\x14\x76\x39\x42\x7a\xec\xca\x6c\xd2\xa5\xe9\xea\x88\xf9\xee\x23\x49\x5b\xeb\x50\x5b\x87\x78\xd5\x34\x3d\x7f\x7e\xe7\x79\xca\xd1\x7a\x9c\x53\xf6\x41\x13\x84\xe9\x1d\x44\x8b\xfa\x6c\x0c\x69\xae\xb5\x86\x36\xc4\x18\x42\xd2\x2c\x17\x52\xc1\x88\x09\xae\x70\xab\x46\xc4\x06\x14\x28\xbf\x52\x86\x85\x2b\xb2\x6c\x5e\x8c\xd1\x5a\x52\x9e\x20\xb4\x11\x36\xa0\x8d\x36\x86\x68\x9d\xae\xdb\x8b\x68\x4e\x33\x74\x59\x30\xce\x50\xbd\x8b\xd8\x17\x7c\xae\xcf\xfb\x7a\xf5\x67\x57\x2d\xeb\x7c\x05\x5b\xcd\x5f\x38\x0c\x94\x4b\x25\x91\x66\x29\x4f\x2c\xbc\xfa\xce\xfd\x40\x3e\x64\x97\xa0\x5a\x48\xa1\x44\xdd\xf7\x9e\xc7\xb9\x48\xb9\x7a\x28\x39\x83\x75\xc9\x59\x20\xf1\x13\xfe\x1f\x49\x78\xe4\x79\xa9\x56\xb6\x9a\x31\x13\x28\x5c\x8f\xae\x52\x3b\x46\x33\xdc\xcc\x68\x61\x03\xde\x4e\x77\xf4\x8c\x21\xa0\x94\x42\x5a\x25\x71\xe3\x52\x2e\x27\x65\x6a\x0b\xb5\x25\xd1\xcc\x3f\x27\x30\x04\x3f\x84\xe0\x58\xc8\x4b\xa9\xba\x23\x3a\xc0\xd0\x11\xf2\x18\x9c\x71\xc8\x63\xfb\x3f\xb4\xa4\xbf\x4c\x6c\x10\x0b\x2b\x4f\xc9\x14\x68\x02\x00\xd0\xeb\x60\xcf\xc4\x03\x45\xa9\x7b\x79\xc6\x21\x94\xaf\x92\xe6\x39\xca\x2b\xc0\xae\xc4\x93\xa8\x50\x82\x31\x7f\x64\xb5\x7e\xc2\x1c\xab\x01\xb8\xc1\xf9\xa1\x42\xef\x7e\xdf\xcc\x7e\x58\x89\xaa\x94\x1c\xfe\x0d\xcf\xb8\x82\x44\x53\xc0\xa8\x5f\xa5\x49\xa7\x9d\x97\xc9\x9e\x9d\x58\xe7\xfb\x93\xde\x95\xe0\xc4\x0e\xaa\x21\xff\x46\x78\xc6\xcf\xdb\x6e\x8a\x43\xc7\xaa\x53\x0a\xee\x65\xb6\x78\x4d\xf7\x90\x98\xee\xa6\xb9\x96\x00\x37\x59\x40\x97\x0f\xce\xd4\xd6\x61\x34\x53\x1f\x6c\xaf\xc3\xc7\x4f\x00\x00\x00\xff\xff\xb8\x10\x0c\x4c\x0c\x07\x00\x00")

func endpointsPbGoTmplBytes() ([]byte, error) {
	return bindataRead(
		_endpointsPbGoTmpl,
		"endpoints.pb.go.tmpl",
	)
}

func endpointsPbGoTmpl() (*asset, error) {
	bytes, err := endpointsPbGoTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "endpoints.pb.go.tmpl", size: 1804, mode: os.FileMode(420), modTime: time.Unix(1549897294, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"bindata.go":           bindataGo,
	"endpoints.pb.go.tmpl": endpointsPbGoTmpl,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"bindata.go":           &bintree{bindataGo, map[string]*bintree{}},
	"endpoints.pb.go.tmpl": &bintree{endpointsPbGoTmpl, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
